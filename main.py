#!/usr/bin/python3
# -*- coding: utf-8 -*-
from random import shuffle, choice
import sys
from PyQt5.QtWidgets import (QWidget, QGridLayout,
    QPushButton, QApplication, QLabel)
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtGui import QPainter, QColor, QFont
data = [["Гнев", "Восторг", "Удивление", "Грусть"], 
        ["Радость","Страсть","Гордость", "Обида"],
        ["Cтрах","Разочарование","Удивление", "Обида"], 
        ["Удивление","Отвращение","Неловкость", "Ликование"],
        ["Грусть","Благодарность","Восхищение", "Отчаяние"],
        ["Раздражение","Гордость","Азарт", "Презрение"]]

ans_bool = [{"Гнев":1, "Восторг":0, "Удивление":0, "Грусть":0},
            {"Радость":1,"Страсть":0,"Гордость":0, "Обида":0},
            {"Cтрах":1,"Разочарование":0,"Удивление":0, "Обида":0},
            {"Удивление":1,"Отвращение":0,"Неловкость":0, "Ликование":0},
            {"Грусть":1,"Благодарность":0,"Восхищение":0, "Отчаяние":0},
            {"Раздражение":1,"Гордость":0,"Азарт":0, "Презрение":0}]

inf = [[["Следуй голосу ума, а не ……. (c) Уильям Шекспир",
         "Ни одна страсть не помрачает в такой мере ясность суждения, как ….. (c) Мишель де Монтень ", 
         "……. всегда имеет основания, но редко достаточно веские. (c)Бенджамин Франклин",
         "Что началось ……., кончается стыдом. (c) Бенджамин Франклин",
         "Отдаваться …… часто все равно, что мстить самому себе за вину другого. (c)Джонатан Свифт",
         "Приходить в …… — значит вымещать на себе ошибки другого. (c) Александр Поп"], 
        
        ["Очень сильная эмоциональная реакция, которая возникает в ряде ситуаций, например, в случае физического насилия, причинения ущерба, лишения имущества, нападения или угроз и т.д. Состояние бурного аффекта, остро наступает и скоро проходит. Часто сопровождается двигательным возбуждением и агрессивно-разрушительными тенденциями.",
         "Очень сильная эмоциональная реакция, которая возникает в ряде ситуаций, например, в случае физического насилия, причинения ущерба, лишения имущества, нападения или угроз и т.д. "]], 
       # ---------------------------------------------------------------------------------------------------------------
       [["….. — это дерево, и жаль, Что корень всякой …… — печаль. (c) Ю. Баласагуни",
        "Человек рожден не для удовольствия, а для …….. (c) Поль Клодель",
        "…….. ощущает лишь тот, кто доставляет ее другим. (c)Карл Барт"],
        
        ["Состояние большого душевного удовлетворения по поводу сбывшихся желаний; наслаждение, внутреннее чувство удовольствия вследствие желанного случая.",
        "Состояние большого душевного удовлетворения по поводу сбывшихся желаний; наслаждение, внутреннее чувство удовольствия вследствие желанного случая."]],
       # ---------------------------------------------------------------------------------------------------------------
       [["…… — это болезненное ощущение своей исключительности. (c) К. Чуковский",
         "….. и надежда могут убедить человека в чем угодно. (c) Л. Вовенарг",
         "Нам нечего бояться, кроме ……. (c) Франклин Рузвельт"],
        
        ["Эмоция, возникающая в ситуациях угрозы биологическому или социальному существованию человека и направленная на источник действительной или воображаемой опасности.",
         "Эмоция, возникающая в ситуациях угрозы биологическому или социальному существованию человека."]
        ],
       # ---------------------------------------------------------------------------------------------------------------
       [["Ничего не бывает так, как ожидаешь. Всегда есть место …... (из Доктор Кто (Doctor Who))", 
         "Зло не стоит ……., горю нечего дивиться,Удивляться нужно счастью, ибо счастье — небылица. (с) Шота Руставели",
         "Тайна вызывает ……., а …… – основа человеческого желания понять. (c) Нил Армстронг"], 
        
        ["Интеллектуально-эмоциональное состояние от встречи с чем-то странным, неожиданным, необычным. Может быть приятным и неприятным",
         "Интеллектуально-эмоциональное состояние от встречи с чем-то странным, неожиданным, необычным."]],
       # ---------------------------------------------------------------------------------------------------------------
       [["— Так значит, ….. — это место? — Да. Иногда люди живут там годами. (c)Элизабет Гилберт",
         "…… перед дальней дорогой вполне естественна, даже тогда, когда человек знает, что в конце этой дороги его ждёт счастье. (c)М. Булгаков",
         "Никакие истины не могут излечить ….. от потери любимого человека. (c) Харуки Мураками"],
        
        ["Отрицательно окрашенная эмоция. Возникает в случае значительной неудовлетворённости человека в каких-либо аспектах его жизни.",
         "Отрицательно окрашенная эмоция. Возникает в случае значительной неудовлетворённости человека в каких-либо аспектах его жизни."]],
       #-------------------------------------------------------------------------------------------------------------------------
       [["Ненависть и ….. — роскошь, которую мы не в состоянии себе позволить, кем бы мы ни были. (c) Джон Фаулз",
         "….. неведомы полутона. (c) Лопе де Вега",
         "Чрезмерное ……, ведущее к склоке, сокращает жизнь. (c) Александр Александрович Богомолец"],
        
        ["Это недовольное состояние, когда любая мелочь злит, вызывает сильную болезненную реакцию, вплоть до скандала.",
         "Это недовольное состояние, когда любая мелочь злит, вызывает сильную болезненную реакцию, вплоть до скандала."]]]

task = ["Выберите эмоцию, которую испытывает человек на картинке", "Неверно. В предложениии под картинкой пропушенна название искомой эмоции", "Последняя попытка. Определение эмоции поможет сделать правильный выбор"]
temp = [i for i in range(len(data))]
shuffle(temp)
score = 0
now = 0
level = 0
img = ['img/1.jpg', 'img/2.jpg', 'img/3.jpg',"img/4.png", "img/5.jpg", "img/6.jpg"]
class Example(QWidget):
    
    def __init__(self):
        super().__init__()

        self.initUI()


    def initUI(self):
        
        self.grid = QGridLayout()
        self.setLayout(self.grid)
        
        self.txt_task = QLabel("<center><h1>" + task[0] + "</h1></center>", self)
        self.grid.addWidget(self.txt_task, 0,0)
        self.txt_task.setWordWrap(True)
        
        self.txt_score = QLabel("<h1> Баллы: " + str(score) + "</h1>", self)
        self.grid.addWidget(self.txt_score, len(data[temp[now]]) + 3, 0)
        self.txt_score.setWordWrap(True)        
        
        
        self.pixmap = QPixmap(img[temp[now]])
        self.label = QLabel(self)
        self.label.setPixmap(self.pixmap)
        self.resize(self.pixmap.width(),self.pixmap.height())        
        self.grid.addWidget(self.label, 1,0)
        
        self.txt = QLabel("", self)
        self.grid.addWidget(self.txt, 2,0)
        self.txt.setWordWrap(True)
        i = 3
        self.bnt = []
        shuffle(data[temp[now]])
        for q in data[temp[now]]:
            self.bnt.append(QPushButton(q))
            self.bnt[-1].setFont(QFont("Arial", 18))
            self.grid.addWidget(self.bnt[-1], i, 0)
            self.bnt[-1].clicked.connect(self.buttonClicked)
            i += 1

        
        self.setWindowTitle('***')
        self.show()
    def buttonClicked(self):
        global level, now, score
        sender = self.sender().text()
        self.txt_score.setText("<h1> Баллы: " + str(score) + "</h1>")
        if ans_bool[temp[now]][sender]:
            score += 3 - level
            self.next_question()     
        else:
            if level < len(inf[temp[now]]):
                
                self.txt_task.setText("<center><h1>" + task[level + 1] + "</h1></center>")
                self.txt.setText("<center><h1>" + choice(inf[temp[now]][level]) + "</h1></center>")
                level += 1
            else:
                self.next_question()
                
    def next_question(self):
        global level, now,score
        self.txt_score.setText("<h1> Баллы: " + str(score) + "</h1>")
        level = 0
        if now < len(data) - 1:
            now += 1
        else:
            score = 0
            now = 0
            shuffle(temp)
        
        self.txt_task.setText("<center><h1>" + task[level] + "</h1></center>")
        
        
        pixmap = QPixmap(img[temp[now]])
        self.label.setPixmap(pixmap)
        # self.resize(pixmap.width() - 10, pixmap.height())    
        self.grid.addWidget(self.label, 1,0)
                
        self.txt.setText("")
        self.pixmap = QPixmap(img[temp[now]])
        
        shuffle(data[temp[now]])
        for button, text in zip(self.bnt, data[temp[now]]):    
            button.setText("" + text + "")        
            
            
if __name__ == '__main__':

    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())